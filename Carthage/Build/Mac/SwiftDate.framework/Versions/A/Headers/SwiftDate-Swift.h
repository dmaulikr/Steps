// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSDate (SWIFT_EXTENSION(SwiftDate))
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))

/// Return a new NSDate in UTC format from the current system timezone
///
/// :returns: a new NSDate instance
- (NSDate * _Nonnull)toUTC;

/// Convert an UTC NSDate instance to a local time NSDate (note: NSDate object does not contains info about the timezone!)
///
/// :returns: a new NSDate instance
- (NSDate * _Nonnull)toLocalTime;

/// Convert an UTC NSDate instance to passed timezone (note: NSDate object does not contains info about the timezone!)
///
/// :param: abbreviation abbreviation of the time zone
///
/// :returns: a new NSDate instance
- (NSDate * _Nullable)toTimezone:(NSString * _Null_unspecified)abbreviation;
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))

/// Attempts to handle all different ISO8601 formatters and returns correct date format for string http://www.w3.org/TR/NOTE-datetime
+ (NSString * _Nonnull)ISO8601FormatterFromString:(NSString * _Nonnull)string;

/// Create a new NSDate instance based on refDate (if nil uses current date) and set components
///
/// :param: refDate reference date instance (nil to use NSDate())
/// :param: year    year component (nil to leave it untouched)
/// :param: month   month component (nil to leave it untouched)
/// :param: day     day component (nil to leave it untouched)
/// :param: hour    hour component (nil to leave it untouched)
/// :param: minute  minute component (nil to leave it untouched)
/// :param: second  second component (nil to leave it untouched)
/// :param: tz      time zone component (it's the abbreviation of NSTimeZone, like 'UTC' or 'GMT+2', nil to use current time zone)
///
/// :returns: a new NSDate with components changed according to passed params
+ (NSDate * _Nonnull)dateWithRefDate:(NSDate * _Nullable)refDate year:(NSInteger)year month:(NSInteger)month day:(NSInteger)day hour:(NSInteger)hour minute:(NSInteger)minute second:(NSInteger)second tz:(NSString * _Nullable)tz;

/// Return a new NSDate instance with the current date and time set to 00:00:00
///
/// :param: tz optional timezone abbreviation
///
/// :returns: a new NSDate instance of the today's date
+ (NSDate * _Null_unspecified)today:(NSString * _Nullable)tz;

/// Return a new NSDate istance with the current date minus one day
///
/// :param: tz optional timezone abbreviation
///
/// :returns: a new NSDate instance which represent yesterday's date
+ (NSDate * _Null_unspecified)yesterday:(NSString * _Nullable)tz;

/// Return a new NSDate istance with the current date plus one day
///
/// :param: tz optional timezone abbreviation
///
/// :returns: a new NSDate instance which represent tomorrow's date
+ (NSDate * _Null_unspecified)tomorrow:(NSString * _Nullable)tz;

/// Allows you to set individual date components by passing an array of components name and associated values
///
/// :param: componentsDict components dict. Accepted keys are year,month,day,hour,minute,second
///
/// :returns: a new date instance with altered components according to passed dictionary
- (NSDate * _Nullable)setWithComponentsDict:(NSDictionary<NSString *, NSNumber *> * _Null_unspecified)componentsDict;

/// Add or subtract (via negative values) components from current date instance
///
/// :param: years   nil or +/- years to add or subtract from date
/// :param: months  nil or +/- months to add or subtract from date
/// :param: weeks   nil or +/- weeks to add or subtract from date
/// :param: days    nil or +/- days to add or subtract from date
/// :param: hours   nil or +/- hours to add or subtract from date
/// :param: minutes nil or +/- minutes to add or subtract from date
/// :param: seconds nil or +/- seconds to add or subtract from date
///
/// :returns: a new NSDate instance with changed values
- (NSDate * _Nonnull)addWithYears:(NSInteger)years months:(NSInteger)months weeks:(NSInteger)weeks days:(NSInteger)days hours:(NSInteger)hours minutes:(NSInteger)minutes seconds:(NSInteger)seconds;

/// Add value specified by components in passed dictionary to the current date
///
/// :param: componentsDict dictionary of the component to alter with value (year,month,day,hour,minute,second)
///
/// :returns: new date with altered components
- (NSDate * _Nullable)addWithComponentsDict:(NSDictionary<NSString *, NSNumber *> * _Null_unspecified)componentsDict;
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))

/// Return a formatted string with passed style for date and time
///
/// :param: dateStyle    style of the date component into the output string
/// :param: timeStyle    style of the time component into the output string
/// :param: relativeDate true to use relative date style
///
/// :returns: string representation of the date
- (NSString * _Nonnull)toStringWithDateStyle:(NSDateFormatterStyle)dateStyle timeStyle:(NSDateFormatterStyle)timeStyle relativeDate:(BOOL)relativeDate;

/// Return an ISO8601 formatted string from the current date instance
///
/// :returns: string with date in ISO8601 format
- (NSString * _Nonnull)toISOString;

/// Return a relative string which represent the date instance
///
/// :param: fromDate    comparison date (by default is the current NSDate())
/// :param: abbreviated true to use abbreviated unit forms (ie. "ys" instead of "years")
/// :param: maxUnits    max detail units to print (ie. "1 hour 47 minutes" is maxUnit=2, "1 hour" is maxUnit=1)
///
/// :returns: formatted string
- (NSString * _Nonnull)toRelativeString:(NSDate * _Nonnull)fromDate abbreviated:(BOOL)abbreviated maxUnits:(NSInteger)maxUnits;

/// Return a string representation of the date where both date and time are in short style format
///
/// :returns: date's string representation
- (NSString * _Nonnull)toShortString;

/// Return a string representation of the date where both date and time are in medium style format
///
/// :returns: date's string representation
- (NSString * _Nonnull)toMediumString;

/// Return a string representation of the date where both date and time are in long style format
///
/// :returns: date's string representation
- (NSString * _Nonnull)toLongString;

/// Return a string representation of the date with only the date in short style format (no time)
///
/// :returns: date's string representation
- (NSString * _Nonnull)toShortDateString;

/// Return a string representation of the date with only the time in short style format (no date)
///
/// :returns: date's string representation
- (NSString * _Nonnull)toShortTimeString;

/// Return a string representation of the date with only the date in medium style format (no date)
///
/// :returns: date's string representation
- (NSString * _Nonnull)toMediumDateString;

/// Return a string representation of the date with only the time in medium style format (no date)
///
/// :returns: date's string representation
- (NSString * _Nonnull)toMediumTimeString;

/// Return a string representation of the date with only the date in long style format (no date)
///
/// :returns: date's string representation
- (NSString * _Nonnull)toLongDateString;

/// Return a string representation of the date with only the time in long style format (no date)
///
/// :returns: date's string representation
- (NSString * _Nonnull)toLongTimeString;
@end

@class NSDateComponents;

@interface NSDate (SWIFT_EXTENSION(SwiftDate))

/// Return the difference in terms of NSDateComponents between two dates.
///
/// \param toDate other date to compare
///
/// \param unitFlags components to compare
///
/// \returns  result of comparision as NSDateComponents
- (NSDateComponents * _Nonnull)difference:(NSDate * _Nonnull)toDate unitFlags:(NSCalendarUnit)unitFlags;

/// <ul><li>This function is deprecated. See -difference</li></ul>
- (NSInteger)secondsAfterDate:(NSDate * _Nonnull)date;

/// <ul><li>This function is deprecated. See -difference</li></ul>
- (NSInteger)secondsBeforeDate:(NSDate * _Nonnull)date;

/// <ul><li>This function is deprecated. See -difference</li></ul>
- (NSInteger)minutesAfterDate:(NSDate * _Nonnull)date;

/// <ul><li>This function is deprecated. See -difference</li></ul>
- (NSInteger)minutesBeforeDate:(NSDate * _Nonnull)date;

/// <ul><li>This function is deprecated. See -difference</li></ul>
- (NSInteger)hoursAfterDate:(NSDate * _Nonnull)date;

/// <ul><li>This function is deprecated. See -difference</li></ul>
- (NSInteger)hoursBeforeDate:(NSDate * _Nonnull)date;

/// <ul><li>This function is deprecated. See -difference</li></ul>
- (NSInteger)daysAfterDate:(NSDate * _Nonnull)date;

/// <ul><li>This function is deprecated. See -difference</li></ul>
- (NSInteger)daysBeforeDate:(NSDate * _Nonnull)date;

/// Compare two dates and return true if they are equals
///
/// :param: date       date to compare with
/// :param: ignoreTime true to ignore time of the date
///
/// :returns: true if two dates are equals
- (BOOL)isEqualToDate:(NSDate * _Nonnull)date ignoreTime:(BOOL)ignoreTime;

/// Return true if given date's time in passed range
///
/// :param: minTime min time interval (by default format is "HH:mm", but you can specify your own format in format parameter)
/// :param: maxTime max time interval (by default format is "HH:mm", but you can specify your own format in format parameter)
/// :param: format  nil or a valid format string used to parse minTime and maxTime from their string representation (when nil HH:mm is used)
///
/// :returns: true if date's time component falls into given range
- (BOOL)isInTimeRange:(NSString * _Null_unspecified)minTime maxTime:(NSString * _Null_unspecified)maxTime format:(NSString * _Nullable)format;

/// Return true if the date's year is a leap year
///
/// :returns: true if date's year is a leap year
- (BOOL)isLeapYear;

/// Return the number of days in current date's month
///
/// :returns: number of days of the month
- (NSInteger)monthDays;

/// True if the date is the current date
///
/// :returns: true if date is today
- (BOOL)isToday;

/// True if the date is the current date plus one day (tomorrow)
///
/// :returns: true if date is tomorrow
- (BOOL)isTomorrow;

/// True if the date is the current date minus one day (yesterday)
///
/// :returns: true if date is yesterday
- (BOOL)isYesterday;

/// Return true if the date falls into the current week
///
/// :returns: true if date is inside the current week days range
- (BOOL)isThisWeek;

/// Return true if the date falls into the current month
///
/// :returns: true if date is inside the current month
- (BOOL)isThisMonth;

/// Return true if the date falls into the current year
///
/// :returns: true if date is inside the current year
- (BOOL)isThisYear;

/// Return true if the date is in the same week of passed date
///
/// :param: date date to compare with
///
/// :returns: true if both dates falls in the same week
- (BOOL)isSameWeekOf:(NSDate * _Nonnull)date;

/// Return the first day of the passed date's week (Sunday)
///
/// :returns: NSDate with the date of the first day of the week
- (NSDate * _Nonnull)dateAtWeekStart;

/// Return a date which represent the beginning of the current day (at 00:00:00)
@property (nonatomic, readonly, strong) NSDate * _Nonnull beginningOfDay;

/// Return a date which represent the end of the current day (at 23:59:59)
@property (nonatomic, readonly, strong) NSDate * _Nonnull endOfDay;

/// Return the first day of the month of the current date
@property (nonatomic, readonly, strong) NSDate * _Nonnull beginningOfMonth;

/// Return the last day of the month of the current date
@property (nonatomic, readonly, strong) NSDate * _Nonnull endOfMonth;

/// Returns true if the date is in the same month of passed date
- (BOOL)isSameMonthOf:(NSDate * _Nonnull)date;

/// Return the first day of the year of the current date
@property (nonatomic, readonly, strong) NSDate * _Nonnull beginningOfYear;

/// Return the last day of the year of the current date
@property (nonatomic, readonly, strong) NSDate * _Nonnull endOfYear;

/// Returns true if the date is in the same year of passed date
- (BOOL)isSameYearOf:(NSDate * _Nonnull)date;

/// Return true if current date's day is not a weekend day
///
/// :returns: true if date's day is a week day, not a weekend day
- (BOOL)isWeekday;

/// Return true if the date is the weekend
///
/// :returns: true or false
- (BOOL)isWeekend;
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))
+ (NSArray<NSString *> * _Nonnull)commonFormats;

/// Get the year component of the date
@property (nonatomic, readonly) NSInteger year;

/// Get the month component of the date
@property (nonatomic, readonly) NSInteger month;
@property (nonatomic, readonly) NSInteger weekOfMonth;
@property (nonatomic, readonly) NSInteger weekOfYear;

/// Get the weekday component of the date
@property (nonatomic, readonly) NSInteger weekday;

/// Get the weekday ordinal component of the date
@property (nonatomic, readonly) NSInteger weekdayOrdinal;

/// Get the day component of the date
@property (nonatomic, readonly) NSInteger day;

/// Get the hour component of the date
@property (nonatomic, readonly) NSInteger hour;

/// Get the minute component of the date
@property (nonatomic, readonly) NSInteger minute;
@property (nonatomic, readonly) NSInteger second;
@property (nonatomic, readonly) NSInteger era;
@property (nonatomic, readonly, copy) NSString * _Nonnull monthName;
@property (nonatomic, readonly, copy) NSString * _Nonnull weekdayName;

/// Return the first day of the current date's week
@property (nonatomic, readonly) NSInteger firstDayOfWeek;

/// Return the last day of the week
@property (nonatomic, readonly) NSInteger lastDayOfWeek;

/// Return the nearest hour of the date
@property (nonatomic, readonly) NSInteger nearestHour;
@end

#pragma clang diagnostic pop
